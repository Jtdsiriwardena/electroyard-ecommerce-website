import React, { useState, useEffect } from 'react';
import productService from '../services/productService';
import axios from 'axios';
import Swal from 'sweetalert2';



const api = axios.create({
  baseURL: 'http://localhost:5000/api',
});

function AdminProducts() {
  const [products, setProducts] = useState([]);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState('');
  const [category, setCategory] = useState('');
  const [stockQuantity, setStockQuantity] = useState(0);
  const [brand, setBrand] = useState('');
  const [country, setCountry] = useState('');
  const [weight, setWeight] = useState('');
  const [productCode, setproductcode] = useState('');
  const [discountPercentage, setDiscountPercentage] = useState('');
  const [availability, setAvailability] = useState('in_stock');
  const [image, setImage] = useState(null);
  const [editingProduct, setEditingProduct] = useState(null);
  const [previewImage, setPreviewImage] = useState('');
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await productService.getProducts();
        setProducts(response.data);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };
    fetchProducts();
  }, []);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const res = await api.get('/categories');
      console.log('Categories:', res.data);
      setCategories(res.data);
    } catch (err) {
      console.error('Error fetching categories:', err);
    }
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  const handleDelete = async (id) => {
    try {
      // Show confirmation before deleting
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: "This action cannot be undone.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
      });
  
      if (result.isConfirmed) {
        await productService.deleteProduct(id);
        setProducts(products.filter((product) => product._id !== id));
  
        // Show success message
        Swal.fire(
          'Deleted!',
          'The product has been deleted.',
          'success'
        );
      }
    } catch (error) {
      console.error('Error deleting product:', error);
  
      // Show error message
      Swal.fire(
        'Error!',
        'There was a problem deleting the product.',
        'error'
      );
    }
  };
  

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    let autoGeneratedCode = productCode;
  
  
    if (!editingProduct) {
      const nextCodeNumber = products.length + 1; // Simple increment based on array length
      autoGeneratedCode = `PRD-${String(nextCodeNumber).padStart(3, '0')}`;
      setproductcode(autoGeneratedCode);
    }
  
    const formData = new FormData();
    formData.append('name', name);
    formData.append('description', description);
    formData.append('price', price);
    formData.append('category', category);
    formData.append('stock_quantity', stockQuantity);
    formData.append('brand', brand);
    formData.append('product_code', autoGeneratedCode); 
    formData.append('country', country);
    formData.append('weight', weight);
    formData.append('discount_percentage', discountPercentage);
    formData.append('availability', availability);
    if (image) formData.append('image', image);
  
    try {
      if (editingProduct) {
        const response = await productService.updateProduct(editingProduct._id, formData);
        setProducts(products.map((product) =>
          product._id === editingProduct._id ? response.data : product
        ));
        // Show success alert for product update
        Swal.fire({
          title: 'Product Updated',
          text: 'The product was successfully updated.',
          icon: 'success',
          confirmButtonText: 'OK',
        });
      } else {
        const response = await productService.createProduct(formData);
        setProducts([response.data, ...products]);
        // Show success alert for product creation
        Swal.fire({
          title: 'Product Created',
          text: 'The product was successfully created.',
          icon: 'success',
          confirmButtonText: 'OK',
        });
      }
  
      // Reset the form after successful submit
      resetForm();
    } catch (error) {
      console.error('Error saving product:', error);
      // Show error alert
      Swal.fire({
        title: 'Error',
        text: 'An error occurred while saving the product. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK',
      });
    }
  };
  
  

  const handleEdit = (product) => {
    setEditingProduct(product);
    setName(product.name);
    setDescription(product.description);
    setPrice(product.price);
    setCategory(product.category);
    setStockQuantity(product.stock_quantity);
    setBrand(product.brand || '');
    setCountry(product.country || '');
    setWeight(product.weight || '');
    setproductcode(product.product_code || ''); 
    setDiscountPercentage(product.discount_percentage || '');
    setAvailability(product.availability || 'in_stock');
    setPreviewImage(product.image ? `http://localhost:5000/${product.image}` : '');
  
  };
  
  const resetForm = () => {
    setName('');
    setDescription('');
    setPrice('');
    setCategory('');
    setStockQuantity(0);
    setBrand('');
    setCountry('');
    setWeight('');
    setproductcode('');
    setDiscountPercentage('');
    setAvailability('in_stock');
    setImage(null);
    setPreviewImage('');
    setEditingProduct(null);

  };
  

  return (
    
    <div className="p-8 max-w-7xl mx-auto bg-gray-100 min-h-screen">
  
  <h1 className="text-4xl font-bold mb-10 tracking-wide text-gray-800 text-center">Products</h1>

  {/* Product Form */}
  <form onSubmit={handleSubmit} encType="multipart/form-data" className="bg-white p-8 rounded-2xl shadow-xl border border-gray-100 max-w-4xl mx-auto">
  {/* Form Header */}
  <div className="mb-8">
    <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
      </svg>
      {editingProduct ? 'Edit Product' : 'Add New Product'}
    </h2>
    <p className="text-gray-500">Fill in the product details below</p>
  </div>

  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    {/* Basic Information Group */}
    <div className="md:col-span-2 bg-white p-4 rounded-xl">
      <h3 className="font-semibold text-lg text-black mb-4 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        Basic Information
      </h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Product Code */}
        <div className="space-y-1">
        <label className="block text-sm font-medium text-gray-700">Product Code *</label>
        <input
  type="text"
  value={productCode}
  readOnly
  className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-100"
  placeholder="Auto-generated"
/>
</div>


        {/* Name */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Product Name *</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
            placeholder="Enter product name"
          />
        </div>

        {/* Category */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Category *</label>
          <select
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition bg-white"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
          >
            <option value="">Select Category</option>
            {categories.map((cat) => (
              <option key={cat._id} value={cat.name}>
                {cat.name}
              </option>
            ))}
          </select>
        </div>

        {/* Brand */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Brand</label>
          <input
            type="text"
            value={brand}
            onChange={(e) => setBrand(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
            placeholder="Brand name"
          />
        </div>
      </div>
    </div>

    {/* Pricing & Inventory Group */}
    <div className="bg-white p-4 rounded-xl">
      <h3 className="font-semibold text-lg text-black mb-4 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        Pricing & Inventory
      </h3>
      <div className="space-y-4">
        {/* Price */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Price *</label>
          <div className="relative">
            <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
            <input
              type="number"
              step="0.01"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              required
              className="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
              placeholder="0.00"
            />
          </div>
        </div>

        {/* Discount */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Discount Percentage</label>
          <div className="relative">
            <input
              type="number"
              value={discountPercentage}
              onChange={(e) => setDiscountPercentage(e.target.value)}
              min="0"
              max="100"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
              placeholder="0"
            />
            <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">%</span>
          </div>
        </div>

        {/* Stock Quantity */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Stock Quantity *</label>
          <input
            type="number"
            value={stockQuantity}
            onChange={(e) => setStockQuantity(e.target.value)}
            min="0"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
            placeholder="0"
          />
        </div>

        {/* Availability */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Availability *</label>
          <select
            value={availability}
            onChange={(e) => setAvailability(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition bg-white"
          >
            <option value="in_stock">In Stock</option>
            <option value="out_of_stock">Out of Stock</option>
          </select>
        </div>
      </div>
    </div>

    {/* Shipping & Details Group */}
    <div className="bg-white p-4 rounded-xl">
      <h3 className="font-semibold text-lg text-black mb-4 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0" />
        </svg>
        Shipping & Details
      </h3>
      <div className="space-y-4">
        {/* Country */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Country of Origin</label>
          <input
            type="text"
            value={country}
            onChange={(e) => setCountry(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
            placeholder="Country"
          />
        </div>

        {/* Weight */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Weight</label>
          <div className="relative">
            <input
              type="number"
              value={weight}
              onChange={(e) => setWeight(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
              placeholder="0.00"
            />
            <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">kg</span>
          </div>
        </div>
      </div>
    </div>

    {/* Description & Media Group */}
    <div className="md:col-span-2 bg-white p-4 rounded-xl">
      <h3 className="font-semibold text-lg text-black mb-4 flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        Description & Media
      </h3>
      <div className="space-y-4">
        {/* Description */}
        <div className="space-y-1">
          <label className="block text-sm font-medium text-gray-700">Description *</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            rows="4"
            required
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-300 focus:border-blue-500 transition"
            placeholder="Detailed product description..."
          />
        </div>

        {/* Product Image */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">Product Images</label>
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition cursor-pointer">
            <input
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="hidden"
              id="product-image-upload"
            />
            <label htmlFor="product-image-upload" className="cursor-pointer">
              <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p className="mt-1 text-sm text-gray-600">Click to upload or drag and drop</p>
              <p className="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
            </label>
          </div>
          {previewImage && (
            <div className="mt-4 flex items-center gap-4">
              <div className="relative">
                <img src={previewImage} alt="Preview" className="h-24 w-24 rounded-md object-cover border border-gray-200" />
                <button 
                  type="button" 
                  onClick={() => setPreviewImage(null)}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <span className="text-sm text-gray-500">Image preview</span>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  {/* Form Actions */}
  <div className="mt-8 pt-6 border-t border-gray-200 flex justify-end gap-4">
    {editingProduct && (
      <button
        type="button"
        onClick={resetForm}
        className="px-6 py-2.5 border border-gray-300 rounded-lg font-medium text-gray-700 hover:bg-gray-50 transition focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        Cancel
      </button>
    )}
    <button 
      type="submit" 
      className="px-6 py-2.5 bg-blue-600 hover:bg-blue-700 rounded-lg font-medium text-white transition focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 flex items-center gap-2"
    >
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
      </svg>
      {editingProduct ? 'Update Product' : 'Add Product'}
    </button>
  </div>
</form>

  {/* Divider */}
  <hr className="my-12 border-gray-300" />

  {/* Product List Header */}
<div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
  <div>
    <h2 className="text-3xl font-bold text-gray-800">Product Inventory</h2>
    <p className="text-gray-500 mt-1">{products.length} products available</p>
  </div>
</div>

{/* Product Grid */}
<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
  {products.map((product) => (
    <div key={product._id} className="border border-gray-200 rounded-xl overflow-hidden shadow-sm hover:shadow-md bg-white transition-all duration-300 flex flex-col">
      {/* Product Image */}
      <div className="relative h-48 bg-gray-100 group overflow-hidden">
        {product.image ? (
          <img
            src={`http://localhost:5000/${product.image}`}
            alt={product.name}
            className="object-cover h-full w-full transition-transform duration-500 group-hover:scale-105"
          />
        ) : (
          <div className="h-full w-full flex items-center justify-center text-gray-400">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
        )}
        {/* Status Badge */}
        <span className={`absolute top-3 right-3 px-2 py-1 rounded-full text-xs font-semibold ${product.availability === 'in_stock' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
          {product.availability === 'in_stock' ? 'In Stock' : 'Out of Stock'}
        </span>
        {/* Discount Badge */}
        {product.discount_percentage > 0 && (
          <span className="absolute top-3 left-3 px-2 py-1 bg-red-500 text-white rounded-full text-xs font-bold">
            {product.discount_percentage}% OFF
          </span>
        )}
      </div>

      {/* Product Info */}
      <div className="p-4 flex-1 flex flex-col">
        <div className="flex justify-between items-start mb-2">
          <h3 className="text-lg font-semibold text-gray-800 line-clamp-1">{product.name}</h3>
          <div className="flex items-center">
            {product.discount_percentage > 0 ? (
              <div className="text-right">
                <span className="text-red-500 font-bold">${(product.price * (1 - product.discount_percentage / 100)).toFixed(2)}</span>
                <span className="text-xs text-gray-400 line-through ml-1">${product.price}</span>
              </div>
            ) : (
              <span className="font-bold text-gray-800">${product.price}</span>
            )}
          </div>
        </div>

        <p className="text-sm text-gray-500 mb-3 line-clamp-2">{product.description}</p>

        <div className="grid grid-cols-2 gap-2 text-xs text-gray-600 mb-4">
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
            </svg>
            {product.brand || 'N/A'}
          </div>
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {product.country || 'N/A'}
          </div>
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
            </svg>
            {product.category || 'N/A'}
          </div>
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
            </svg>
            {product.weight || '0'} kg
          </div>
        </div>

        {/* Actions */}
        <div className="mt-auto flex gap-2">
          <button
            onClick={() => handleEdit(product)}
            className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-600 font-medium py-2 px-3 rounded-lg flex items-center justify-center gap-1 transition text-sm"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            Edit
          </button>
          <button
            onClick={() => handleDelete(product._id)}
            className="flex-1 bg-red-50 hover:bg-red-100 text-red-600 font-medium py-2 px-3 rounded-lg flex items-center justify-center gap-1 transition text-sm"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete
          </button>
        </div>
      </div>
    </div>
  ))}
</div>

{/* Empty State */}
{products.length === 0 && (
  <div className="bg-gray-50 rounded-xl p-12 text-center">
    <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
    </svg>
    <h3 className="mt-4 text-lg font-medium text-gray-900">No products found</h3>
    <p className="mt-1 text-gray-500">Get started by adding a new product</p>
    <button className="mt-6 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
      Add Product
    </button>
  </div>
)}
</div>


  );
}

export default AdminProducts;
